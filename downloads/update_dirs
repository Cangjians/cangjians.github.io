#!/usr/bin/python2

# Copyright (c) 2014 Mathieu Bridon
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


import datetime
import os
import sys
import time


header = """---
layout: listing
project: %s
---

"""

line = '<tr><td><a href="%s">%s</a></td><td>%s</td><td>%s</td></tr>\n'


def format_time(t):
    mtime = datetime.datetime.fromtimestamp(t)

    tz_offset = - (time.timezone / 36)
    tz_offset = "+%04d" % tz_offset if tz_offset > 0 else "%05d" % tz_offset

    return "%s %s" % (mtime.strftime("%d-%b-%y %H:%M"), tz_offset)

def format_size(size_b):
    size_g = size_b / 1000000000.0
    if size_g >= 1:
        return "%.1fG" % round(size_g, 1)

    size_m = size_b / 1000000.0
    if size_m >= 1:
        return "%.1fM" % round(size_m, 1)

    size_k = size_b / 1000.0
    if size_k >= 1:
        return "%.1fK" % round(size_k, 1)

    return size_b

def stat_file(f):
    s = os.stat(f)

    mtime = format_time(s.st_mtime)

    if os.path.isdir(f):
        return mtime, "-"

    size = format_size(s.st_size)

    return mtime, size

for root, dirs, files in os.walk("."):
    root = os.path.basename(root)
    file_list = []

    for name in sorted(dirs) + sorted(files):
        if name.startswith("index."):
            # Ignore generated indexes
            continue

        if name in sys.argv[0]:
            # Ignore this script
            continue

        mtime, size = stat_file(os.path.join(root, name))

        file_list.append(line % (name, name, mtime, size))

    index = header % root + "".join(file_list)

    with open(os.path.join(root, "index.md"), "w") as out_:
        out_.write(index)
